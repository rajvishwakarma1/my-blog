import { Annotation, Theme, LanguageAlias, ThemeColors, Lines, Tokens, Token } from '@code-hike/lighter';
import { ReactNode, FunctionComponent } from 'react';

declare function Root(props: BrightProps): JSX.Element;
declare function Pre(brightProps: BrightProps): JSX.Element;

declare function TitleBarContent(props: BrightProps): JSX.Element;
declare function Tab(props: BrightProps): JSX.Element;
declare function TabContent(props: BrightProps): JSX.Element;

declare const components: {
    Pre: typeof Pre;
    Root: typeof Root;
    TitleBarContent: typeof TitleBarContent;
    Tab: typeof Tab;
    TabContent: typeof TabContent;
};

type Prettify<T> = {
    [K in keyof T]: T[K];
} & {};
type BrightComponents = Prettify<typeof components>;
type InlineAnnotationProps = {
    children: React.ReactNode;
    query?: string;
    tokens: Tokens;
    brightProps: BrightProps;
};
type InlineAnnotationComponent = (props: InlineAnnotationProps) => JSX.Element;
type MultilineAnnotationProps = {
    children: React.ReactNode;
    query?: string;
    lines: Lines;
    brightProps: BrightProps;
};
type MultilineAnnotationComponent = (props: MultilineAnnotationProps) => JSX.Element;
type Extension = Prettify<{
    name: string;
    beforeRoot?: (props: CodeProps, annotations: Annotation[]) => CodeProps;
    beforeHighlight?: (props: CodeProps, annotations: Annotation[]) => CodeProps | undefined;
    InlineAnnotation?: InlineAnnotationComponent;
    MultilineAnnotation?: MultilineAnnotationComponent;
} & Partial<BrightComponents>>;
type Extensions = Extension[];
type DoubleTheme = {
    lightSelector?: string;
    dark: Theme;
    light: Theme;
};
type InputCodeProps = Prettify<Omit<Partial<CodeProps>, "mode" | "code" | "theme"> & {
    theme?: Theme | DoubleTheme;
    children?: ReactNode;
    lang?: LanguageAlias;
    code?: string;
}>;
type CodeProps = Prettify<{
    theme: Theme;
    lang: LanguageAlias;
    code: string;
    mode?: "dark" | "light";
    lightThemeSelector?: string;
    style?: React.CSSProperties;
    className?: string;
    codeClassName?: string;
    titleClassName?: string;
    lineNumbers?: boolean;
    title?: string;
    extensions: Extensions;
    annotations: Annotation[];
    subProps?: Partial<Omit<CodeProps, "subProps">>[];
} & BrightComponents>;
type BrightProps = Prettify<Omit<CodeProps, "subProps"> & {
    colors: Prettify<ThemeColors>;
    lines: Lines;
    lineCount: number;
    subProps?: Partial<Omit<BrightProps, "subProps">>[];
}>;

declare function linesToContent(lines: Lines): string;

declare function tokensToTokenList(tokens: Tokens): Token[];
declare function tokensToContent(tokens: Tokens): string;

type CodeComponent = ((props: InputCodeProps) => Promise<JSX.Element>) & Partial<InputCodeProps> & FunctionComponent<InputCodeProps>;
declare const Code: CodeComponent;

export { BrightComponents, BrightProps, Code, Extension, linesToContent, tokensToContent, tokensToTokenList };
