// src/index.tsx
import {
  extractAnnotations,
  LANG_NAMES
} from "@code-hike/lighter";

// src/code.tsx
import { annotatedHighlight } from "@code-hike/lighter";

// src/title.tsx
import { Fragment, jsx, jsxs } from "react/jsx-runtime";
function TitleBar(props) {
  const { activeTabForeground, editorGroupHeaderBackground, tabsBorder } = props.colors;
  const { TitleBarContent: TitleBarContent2 } = props;
  const elementProps = {
    className: props.titleClassName,
    style: {
      background: editorGroupHeaderBackground,
      color: activeTabForeground,
      position: "relative",
      display: "flex"
    }
  };
  return /* @__PURE__ */ jsxs("div", { ...elementProps, children: [
    /* @__PURE__ */ jsx(TitleBarContent2, { ...props }),
    /* @__PURE__ */ jsx(
      "div",
      {
        style: {
          position: "absolute",
          bottom: 0,
          left: 0,
          width: "100%",
          pointerEvents: "none",
          background: tabsBorder,
          height: 1,
          zIndex: 9
        }
      }
    )
  ] });
}
function TitleBarContent(props) {
  return /* @__PURE__ */ jsx(Tab, { ...props });
}
function Tab(props) {
  const { TabContent: TabContent2 } = props;
  return /* @__PURE__ */ jsxs(
    "div",
    {
      "data-bright-tab": props.title,
      style: {
        cursor: "pointer",
        background: "var(--tab-background)",
        color: "var(--tab-color)",
        display: "inline-block",
        padding: "0.5em 1em",
        position: "relative",
        fontFamily: "Segoe WPC,Segoe UI,-apple-system,BlinkMacSystemFont,sans-serif",
        fontSize: "13px",
        borderRight: "1px solid var(--tab-border)"
      },
      children: [
        /* @__PURE__ */ jsx(TabContent2, { ...props }),
        /* @__PURE__ */ jsx(
          "div",
          {
            style: {
              position: "absolute",
              left: 0,
              top: 0,
              height: 1,
              zIndex: 10,
              background: "var(--tab-top-border)",
              width: "100%"
            }
          }
        ),
        /* @__PURE__ */ jsx(
          "div",
          {
            style: {
              position: "absolute",
              bottom: 0,
              left: 0,
              height: 1,
              zIndex: 10,
              background: "var(--tab-bottom-border)",
              width: "100%"
            }
          }
        )
      ]
    }
  );
}
function TabContent(props) {
  return /* @__PURE__ */ jsx(Fragment, { children: props.title });
}

// src/tokens.tsx
import { Fragment as Fragment2, jsx as jsx2 } from "react/jsx-runtime";
function TokensRenderer({
  tokens,
  brightProps
}) {
  return /* @__PURE__ */ jsx2(Fragment2, { children: tokens.map(
    (token, i) => "content" in token ? /* @__PURE__ */ jsx2(TokenRenderer, { token, brightProps }, i) : /* @__PURE__ */ jsx2(
      TokenGroupRenderer,
      {
        tokens: token,
        brightProps
      },
      i
    )
  ) });
}
function TokenGroupRenderer({
  tokens,
  brightProps
}) {
  const { extensions } = brightProps;
  const extension = extensions.find((ext) => ext.name === tokens.annotationName);
  const Wrapper = extension == null ? void 0 : extension.InlineAnnotation;
  if (!Wrapper) {
    return /* @__PURE__ */ jsx2(TokensRenderer, { tokens: tokens.tokens, brightProps });
  }
  return /* @__PURE__ */ jsx2(
    Wrapper,
    {
      query: tokens.annotationQuery,
      tokens: tokens.tokens,
      brightProps,
      children: /* @__PURE__ */ jsx2(TokensRenderer, { tokens: tokens.tokens, brightProps })
    }
  );
}
function TokenRenderer({
  token,
  brightProps
}) {
  return /* @__PURE__ */ jsx2("span", { style: token.style, children: token.content });
}
function tokensToTokenList(tokens) {
  return tokens.map((token) => {
    if ("content" in token) {
      return token;
    } else {
      return tokensToTokenList(token.tokens);
    }
  }).flat();
}
function tokensToContent(tokens) {
  return tokens.map((token) => {
    if ("content" in token) {
      return token.content;
    } else {
      return tokensToContent(token.tokens);
    }
  }).join("");
}

// src/lines.tsx
import { Fragment as Fragment3, jsx as jsx3, jsxs as jsxs2 } from "react/jsx-runtime";
function LinesComponent({
  lines,
  brightProps
}) {
  const { extensions } = brightProps;
  return /* @__PURE__ */ jsx3(Fragment3, { children: lines.map((line, i) => {
    if ("lineNumber" in line) {
      return /* @__PURE__ */ jsx3(LineComponent, { line, brightProps }, i);
    }
    const extension = extensions.find(
      (ext) => ext.name === line.annotationName
    );
    if (extension == null ? void 0 : extension.MultilineAnnotation) {
      const Wrapper = extension.MultilineAnnotation;
      return /* @__PURE__ */ jsx3(
        Wrapper,
        {
          query: line.annotationQuery,
          lines: line.lines,
          brightProps,
          children: /* @__PURE__ */ jsx3(LinesComponent, { lines: line.lines, brightProps })
        },
        i
      );
    } else {
      return /* @__PURE__ */ jsx3(
        LinesComponent,
        {
          lines: line.lines,
          brightProps
        },
        i
      );
    }
  }) });
}
function LineComponent({
  line,
  brightProps
}) {
  const digits = brightProps.lineNumbers ? brightProps.lineCount.toString().length : 0;
  return /* @__PURE__ */ jsx3("div", { style: { padding: "0 1em" }, children: /* @__PURE__ */ jsxs2("span", { children: [
    digits > 0 && /* @__PURE__ */ jsx3(
      "span",
      {
        "data-bright-ln": line.lineNumber,
        style: { width: `${digits}ch` },
        children: line.lineNumber
      }
    ),
    /* @__PURE__ */ jsx3(TokensRenderer, { tokens: line.tokens, brightProps }),
    /* @__PURE__ */ jsx3("br", {})
  ] }) });
}
function linesToContent(lines) {
  return lines.map((line) => {
    if ("lineNumber" in line) {
      return tokensToContent(line.tokens);
    } else {
      return linesToContent(line.lines);
    }
  }).join("\n");
}

// src/code.tsx
import { jsx as jsx4, jsxs as jsxs3 } from "react/jsx-runtime";
async function BrightCode(props) {
  const brightProps = await highlight(props);
  const { Root: Root2 } = brightProps;
  return /* @__PURE__ */ jsx4(Root2, { ...brightProps });
}
async function highlight(props) {
  if (props.subProps) {
    const { subProps, ...rootProps } = props;
    const newSubProps = await Promise.all(
      subProps.map((sub) => highlight({ ...rootProps, ...sub }))
    );
    return {
      ...rootProps,
      ...newSubProps[0],
      subProps: newSubProps
    };
  }
  const { code, lang, theme, annotations } = props;
  const { lines, colors } = await annotatedHighlight(
    code,
    lang,
    theme,
    annotations
  );
  const brightProps = {
    ...props,
    subProps: [],
    colors,
    lines,
    lineCount: code.split(`
`).length
  };
  return brightProps;
}
function Root(props) {
  const { theme, className, style, colors, mode, title, Pre: Pre2 } = props;
  const { foreground } = colors;
  const themeName = getThemeName(theme);
  return /* @__PURE__ */ jsxs3(
    "div",
    {
      "data-bright-theme": themeName,
      "data-bright-mode": mode,
      className,
      style: {
        color: foreground,
        borderRadius: "4px",
        overflow: "hidden",
        margin: "1em 0",
        ["--selection-background"]: colors.selectionBackground,
        ["--line-number-color"]: colors.lineNumberForeground,
        ["--tab-border"]: colors.tabBorder,
        ["--tab-background"]: colors.activeTabBackground,
        ["--tab-color"]: colors.activeTabForeground,
        ["--inactive-tab-background"]: colors.inactiveTabBackground,
        ["--inactive-tab-color"]: colors.inactiveTabForeground,
        ["--tab-top-border"]: colors.activeTabTopBorder,
        ["--tab-bottom-border"]: colors.activeTabBorder,
        colorScheme: colors.colorScheme,
        ...style
      },
      children: [
        /* @__PURE__ */ jsx4(
          Style,
          {
            mode,
            lineNumbers: props.lineNumbers,
            lightThemeSelector: props.lightThemeSelector
          }
        ),
        title && /* @__PURE__ */ jsx4(TitleBar, { ...props }),
        /* @__PURE__ */ jsx4(Pre2, { ...props })
      ]
    }
  );
}
function Pre(brightProps) {
  const { lines, codeClassName, colors } = brightProps;
  const { foreground, background } = colors;
  return /* @__PURE__ */ jsx4(
    "pre",
    {
      style: {
        margin: 0,
        color: foreground,
        background,
        padding: "1em 0",
        overflow: "auto"
      },
      children: /* @__PURE__ */ jsx4(
        "code",
        {
          className: codeClassName,
          style: { display: "block", minWidth: "fit-content" },
          children: /* @__PURE__ */ jsx4(LinesComponent, { lines, brightProps })
        }
      )
    }
  );
}
function Style({
  mode,
  lineNumbers,
  lightThemeSelector
}) {
  const lineNumbersStyle = `[data-bright-theme] [data-bright-ln] { 
    color: var(--line-number-color); 
    margin-right: 1.5ch; 
    display: inline-block;
    text-align: right;
    user-select: none;
  }`;
  const css = `${displayStyle(mode, lightThemeSelector)}
  [data-bright-theme] ::selection { background-color: var(--selection-background) }
  ${lineNumbers ? lineNumbersStyle : ""}
  `;
  return /* @__PURE__ */ jsx4("style", { dangerouslySetInnerHTML: { __html: css } });
}
function displayStyle(mode, lightThemeSelector = '[data-theme="light"]') {
  if (!mode)
    return "";
  if (mode === "dark")
    return `[data-bright-mode="dark"] { display: block }
${lightThemeSelector} [data-bright-mode="dark"] { display: none }`;
  if (mode === "light")
    return `[data-bright-mode="light"] { display: none }
${lightThemeSelector} [data-bright-mode="light"] { display: block }`;
  return "";
}
function getThemeName(theme) {
  if (!theme)
    return "default";
  if (typeof theme === "string")
    return theme;
  return theme.name;
}

// src/components.tsx
var components = {
  Pre,
  Root,
  TitleBarContent,
  Tab,
  TabContent
};
var components_default = components;

// src/index.tsx
import React from "react";
import "server-only";
import { Fragment as Fragment4, jsx as jsx5, jsxs as jsxs4 } from "react/jsx-runtime";
var Code = async (componentProps) => {
  const { children, lang, ...rest } = {
    ...Code,
    ...componentProps
  };
  const propsFromChildren = parseChildren(children, lang, rest.code);
  let props = { ...rest, ...propsFromChildren };
  const { theme } = props;
  const isDouble = theme && theme.dark && theme.light || false;
  if (!isDouble) {
    return /* @__PURE__ */ jsx5(AnnotatedCode, { ...props, theme });
  }
  const doubleTheme = theme;
  const darkTheme = doubleTheme.dark;
  const lightTheme = doubleTheme.light;
  return /* @__PURE__ */ jsxs4(Fragment4, { children: [
    /* @__PURE__ */ jsx5(
      AnnotatedCode,
      {
        ...props,
        theme: darkTheme,
        mode: "dark",
        lightThemeSelector: doubleTheme.lightSelector
      }
    ),
    /* @__PURE__ */ jsx5(
      AnnotatedCode,
      {
        ...props,
        theme: lightTheme,
        mode: "light",
        lightThemeSelector: doubleTheme.lightSelector
      }
    )
  ] });
};
async function AnnotatedCode(props) {
  let newProps = await extractAnnotationsFromCode(props);
  newProps = runExtensionsBeforeHighlight(newProps);
  return /* @__PURE__ */ jsx5(BrightCode, { ...newProps });
}
Code.theme = "dark-plus";
Code.extensions = [];
Object.assign(Code, components_default);
async function extractAnnotationsFromCode(props) {
  if (props.subProps) {
    const { subProps, ...rootProps } = props;
    return {
      ...rootProps,
      subProps: await Promise.all(
        subProps.map(
          (sub) => extractAnnotationsFromCode({ ...rootProps, ...sub })
        )
      )
    };
  }
  const { extensions, code, lang } = props;
  const extensionNames = extensions.map((e) => {
    if (!e || !e.name) {
      throw new Error("Extension must have a name");
    }
    return e.name;
  });
  const { code: newCode, annotations } = await extractAnnotations(
    code,
    lang,
    extensionNames
  );
  const inputAnnotations = props.annotations || [];
  const newProps = {
    ...props,
    code: newCode,
    annotations: inputAnnotations.concat(annotations)
  };
  return newProps;
}
function runExtensionsBeforeHighlight(props) {
  let newProps = props;
  const { extensions, annotations = [] } = props;
  extensions.forEach((extension) => {
    const { Pre: Pre2, Root: Root2, TitleBarContent: TitleBarContent2, Tab: Tab2, TabContent: TabContent2 } = extension;
    newProps = {
      ...newProps,
      Pre: Pre2 || newProps.Pre,
      Root: Root2 || newProps.Root,
      TitleBarContent: TitleBarContent2 || newProps.TitleBarContent,
      Tab: Tab2 || newProps.Tab,
      TabContent: TabContent2 || newProps.TabContent
    };
  });
  if (props.subProps) {
    extensions.forEach((extension) => {
      const { name } = extension;
      if ("beforeRoot" in extension && typeof extension.beforeRoot === "function") {
        const extensionAnnotations = annotations.filter(
          (annotation) => annotation.name === name
        );
        newProps = extension.beforeRoot(newProps, extensionAnnotations) || newProps;
      }
    });
    const { subProps, ...rootProps } = newProps;
    return {
      ...rootProps,
      subProps: (subProps || []).map(
        (sub) => runExtensionsBeforeHighlight({ ...rootProps, ...sub })
      )
    };
  }
  extensions.forEach((extension) => {
    const { name } = extension;
    if ("beforeHighlight" in extension && typeof extension.beforeHighlight === "function") {
      const extensionAnnotations = annotations.filter(
        (annotation) => annotation.name === name
      );
      newProps = extension.beforeHighlight(newProps, extensionAnnotations) || newProps;
    }
  });
  return newProps;
}
function parseChildren(children, lang, code) {
  var _a, _b, _c;
  if (typeof children === "object" && (children == null ? void 0 : children.type) === "code") {
    return {
      code: (_b = (_a = children.props) == null ? void 0 : _a.children) == null ? void 0 : _b.trim(),
      ...getLanguageAndTitle((_c = children.props) == null ? void 0 : _c.className)
    };
  } else if (typeof children === "object") {
    const subProps = React.Children.toArray(children).map((c) => {
      var _a2, _b2, _c2;
      const codeProps = (_b2 = (_a2 = c.props) == null ? void 0 : _a2.children) == null ? void 0 : _b2.props;
      return {
        code: (_c2 = codeProps.children) == null ? void 0 : _c2.trim(),
        ...getLanguageAndTitle(codeProps.className)
      };
    });
    return {
      subProps
    };
  } else {
    let newLang = lang || "text";
    if (!LANG_NAMES.includes(newLang)) {
      console.warn(`Bright warning: Unknown language ${JSON.stringify(lang)}`);
      newLang = "text";
    }
    return {
      code: children || code || "",
      lang: newLang
    };
  }
}
function getLanguageAndTitle(className) {
  if (!className) {
    return { lang: "text" };
  }
  const metastring = className.replace("language-", "");
  const lang = metastring.split(".").pop();
  if (!LANG_NAMES.includes(lang)) {
    console.warn(
      `Bright warning: Unknown language ${JSON.stringify(
        lang
      )} in ${JSON.stringify(metastring)}`
    );
    return { lang: "text" };
  }
  if (lang !== metastring) {
    return { lang, title: metastring };
  }
  return { lang };
}
export {
  Code,
  linesToContent,
  tokensToContent,
  tokensToTokenList
};
